from battleships import*



def main():
    '''Expectations of the high-quality visualisation are as follows:
    1) The new state of the ocean and fleet are presented to the human player each time after he/she shoots
    2) The rows and columns of the ocean are numbered
    3) The squares that have never been shot at are clearly indicated (i)
    4) The squares that have been shot at but not resulted in a hit (nothing was there) are clearly indicated (ii)
    5) The squares containing a ship (of unknown type) that has been hit but not yet sunk are clearly indicated (iii)
    6) The ships that were sunk are clearly indicated, as well as their type (iv).'''
    # The extension is substantively similar to the code of the main function in battleships.py, with the following additions:
    # A list of occupied_cells is created to determine the cells occupied by ships in the fleet
    # A matrix representing the game board is printed at the beginning of the game
    # The matrix board is updated after every turn(using index number generated by the row and column selected + 2 to accommodate for the edges of the matrix board)
    # If a ship is hit, there are separate outcomes depending on whether a ship has been sunk or not (using function is_sunk)
    # If a ship has been sunk, all squares of the sunk ship are converted to either 'S', 'D', 'C' or 'B' depending on the ship type
    # This is done by indexing the affected ship in occupied_cells, which corresponds to current_fleet and contains all the cells of each ship in ship_squares
    # If a ship is simply hit but not sunk, or all ships are missed (if check_if_hits returns False), 'H' for 'hit' or 'M' for 'missed' are assigned to the affected cell
    current_fleet = randomly_place_all_ships()
    list_of_hits = []

    occupied_cells = []
    for s in range(len(current_fleet)):
        ship_squares = []
        ship_squares.append(tuple((current_fleet[s][0], current_fleet[s][1])))
        if current_fleet[s][2] == True:
            for i in range(1, current_fleet[s][3]):
                cell = tuple((current_fleet[s][0], current_fleet[s][1]+i))
                ship_squares.append(cell)
        elif current_fleet[s][2] == False:
            for i in range(1, current_fleet[s][3]):
                cell = tuple((current_fleet[s][0]+i, current_fleet[s][1]))
                ship_squares.append(cell)
        occupied_cells.append(ship_squares)

    matrix_board = [[' ','|','0','1','2','3','4','5','6','7','8','9'],
                ['-','-','-','-','-','-','-','-','-','-','-','-'],
                ['0','|','.','.','.','.','.','.','.','.','.','.'],
                ['1','|','.','.','.','.','.','.','.','.','.','.'],
                ['2','|','.','.','.','.','.','.','.','.','.','.'],
                ['3','|','.','.','.','.','.','.','.','.','.','.'],
                ['4','|','.','.','.','.','.','.','.','.','.','.'],
                ['5','|','.','.','.','.','.','.','.','.','.','.'],
                ['6','|','.','.','.','.','.','.','.','.','.','.'],
                ['7','|','.','.','.','.','.','.','.','.','.','.'],
                ['8','|','.','.','.','.','.','.','.','.','.','.'],
                ['9','|','.','.','.','.','.','.','.','.','.','.']]
               
                                
    for i in range(len(matrix_board)):
      print("".join('{:>4}'.format(x) for x in matrix_board[i]))

    game_over = False
    shots = 0

    print("The fleet consists of 10 ships. The fleet is made up of 4 different types of ships, each of different size as follows:")
    print("- One battleship, occuping four squares")
    print("- Two cruisers, occuping three squares each")
    print("- Three destroyers, occupying two squares each")
    print("- Four submarines, occupying one square each.")
    print("There is clear water separating all the ships in the fleet. Sink all the ships in the fleet in as few shots as possible. Good luck!")

    while not game_over:
        user_input = input("Enter row and column to shoot (separated by space), or 'q' to quit: ").split()
        try:
            int(user_input[0])
            int(user_input[1])
            if int(user_input[0]) >= 0 and int(user_input[0]) <= 9 and int(user_input[1]) >= 0 and int(user_input[1]) <= 9 and len(user_input) ==2:
                pass
            elif len(user_input) > 2:
                print("Please enter two values only.")
                continue
            elif int(user_input[0]) > 9 or int(user_input[1]) > 9 or int(user_input[0]) < 0 or int(user_input[1]) < 0:
                print("Row and column numbers cannot be out of bounds, please try again.")
                continue
        except IndexError:
            print("Invalid input, please try again.")
            continue
        except:
            if user_input[0].lower() == "q":
                game_over = True
                print("You have quit the game. You used",shots,"shots.")
                break
            elif not user_input:
                print("Invalid input, please try again.")
                continue
            else:
                print("Invalid input, please try again.")
                continue
        current_row = int(user_input[0])
        current_column = int(user_input[1])
        if tuple((current_row, current_column)) in list_of_hits:
            print("You have already hit this square, please try again.")
            continue
        shots += 1
        
        if check_if_hits(current_row, current_column, current_fleet):
            print("You have a hit!")
            list_of_hits.append(tuple((current_row, current_column)))
            (current_fleet, ship_hit) = hit(current_row, current_column, current_fleet)
            # Mark on matrix_board where player has a hit with H
            if not is_sunk(ship_hit):  
                matrix_board[current_row + 2][current_column + 2] = "H"
                for i in range(len(matrix_board)):
                    print("".join('{:>4}'.format(x) for x in matrix_board[i]))
            elif is_sunk(ship_hit):
                # Mark on matrix_board where player has sunk a ship with letters indicating sunk ship
                print("You sank a " + ship_type(ship_hit) + "!")
                for i in range(len(occupied_cells)):
                    if tuple((current_row, current_column)) in occupied_cells[i]:
                        if len(occupied_cells[i]) == 1:
                            for j in range(len(occupied_cells[i])):
                                matrix_board[occupied_cells[i][j][0] + 2][occupied_cells[i][j][1] + 2] = "S"
                        if len(occupied_cells[i]) == 2:
                            for j in range(len(occupied_cells[i])):
                                matrix_board[occupied_cells[i][j][0] + 2][occupied_cells[i][j][1] + 2] = "D"
                        if len(occupied_cells[i]) == 3:
                            for j in range(len(occupied_cells[i])):
                                matrix_board[occupied_cells[i][j][0] + 2][occupied_cells[i][j][1] + 2] = "C"
                        if len(occupied_cells[i]) == 4:
                            for j in range(len(occupied_cells[i])):
                                matrix_board[occupied_cells[i][j][0] + 2][occupied_cells[i][j][1] + 2] = "B"
                for i in range(len(matrix_board)):
                    print("".join('{:>4}'.format(x) for x in matrix_board[i]))
                              
        else:
            print("You missed!")
            list_of_hits.append(tuple((current_row, current_column)))
            # Mark on matrix_board where player has a hit with M
            matrix_board[current_row + 2][current_column +2] = "M"
            for i in range(len(matrix_board)):
                print("".join('{:>4}'.format(x) for x in matrix_board[i]))

        if not are_unsunk_ships_left(current_fleet):
            game_over = True
            print("Game over! You required", shots, "shots.")


if __name__ == '__main__': #keep this in
   main()
